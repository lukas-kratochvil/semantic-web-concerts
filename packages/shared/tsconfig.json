{
  "compilerOptions": {
    /* Base options */
    "target": "es2024",
    "outDir": "./dist",
    /* If transpiling with TypeScript (tsc) */
    "module": "commonjs",
    "moduleResolution": "node",
    /* Library compilation */
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "composite": true,
    "rootDir": "src",
    /* Strictness */
    "strict": true, // enables a set of strict type checking options that catch more errors and generally promote better code quality
    "allowUnusedLabels": false, // raises compiler errors about unused labels (label ~ attempt to write an object literal)
    "allowUnreachableCode": false,
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true, // ensure that the sub-classes never go out of sync, by ensuring that functions which override include the keyword `override`
    "noImplicitReturns": true, // ensures all code paths in a function return a value
    "noPropertyAccessFromIndexSignature": true, // warns when accessing unknown object keys
    "noUncheckedIndexedAccess": true, // ensures no unsafe indexing on records and arrays
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    /* Other options */
    "skipLibCheck": true, // compiler won't throw compile-time errors on third-party libraries code (But!! It also skips checking our custom `.d.ts` files)
    "esModuleInterop": true, // enables better compatibility between CommonJS and ES modules, also enables `"allowSyntheticDefaultImports": true`
    "isolatedModules": true, // ensures that each file can be independently transpiled without relying on information from other files (different transpilers from `tsc` like `swc`, `esbuild` etc. don't have enough context to correctly transpile everything)
    "allowJs": true, // allows using JS files inside the project
    "checkJs": true, // works in tandem with 'allowJs' option - type-checks JS files
  },
  "include": [
    "src"
  ]
}
